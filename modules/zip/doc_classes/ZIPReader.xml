<?xml version="1.0" encoding="UTF-8" ?>
<class name="ZIPReader" inherits="RefCounted" version="4.0">
	<brief_description>
		Class for reading zip archives
	</brief_description>
	<description>
		ZIPReader provides a way to open zip archives and read the files inside.
		[codeblock]
		var r := ZIPReader.new()
		r.open("user://test.zip")
		for filename in r.get_files():
		    print(filename, ": ", r.read_file(filename).get_string_from_utf8())
		[/codeblock]
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="open">
			<return type="int" enum="Error">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<description>
				Opens a zip file for reading. If a file was already open, that file will be closed.
			</description>
		</method>
		<method name="get_files">
			<return type="PackedStringArray">
			</return>
			<description>
				Returns the list of file paths in the archive. All paths are relative to the root of the archive.
				For example, if you have an archive containg a folder, "foo", which contains a file, "bar.txt", the list will contain one item: "foo/bar.txt".
			</description>
		</method>
		<method name="read_file">
			<return type="PackedByteArray">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<argument index="1" name="case_sensitive" type="bool" default="true">
			</argument>
			<description>
				Returns the contents of a file in the archive as a [PackedByteArray]. If you need the contents as a string, use [method PackedByteArray.get_string_from_utf8].
				If there is a problem reading the file (such as the file doesn't exist), an empty PackedByteArray will be returned and an error will be logged to the console.
			</description>
		</method>
		<method name="close">
			<return type="int" enum="Error">
			</return>
			<description>
				Closes the file. Subsequent operations other than [method open] will fail after this is called.
			</description>
		</method>
	</methods>
	<members>
	</members>
	<signals>
	</signals>
	<constants>
	</constants>
</class>
